/**
 * Roblox Trackstats - Main Application Script
 * X·ª≠ l√Ω t·∫•t c·∫£ c√°c t√≠nh nƒÉng c·ªßa ·ª©ng d·ª•ng theo d√µi th·ªëng k√™
 */

// Version signature to verify code updates
const APP_VERSION = "3.0.0";
const APP_BUILD_DATE = "2025-03-26";

// Add API base URL variable at the top of the file
let apiUrl = '';
if (typeof isDevelopment !== 'undefined') {
    apiUrl = isDevelopment ? 'http://localhost:8080' : '';
} else {
    // Fallback n·∫øu app.js ch∆∞a ƒë∆∞·ª£c t·∫£i
    const localDev = window.location.hostname === '127.0.0.1' || window.location.hostname === 'localhost';
    apiUrl = localDev ? 'http://localhost:8080' : '';
}
const API_BASE_URL = isDevelopment
    ? 'http://localhost:8080'  // ƒê∆∞·ªùng d·∫´n ph√°t tri·ªÉn local
    : ''; // Empty string for production to use relative URLs

// Debugging utilities - Enable in development, disable in production
const DEBUG = {
    enabled: isDevelopment,
    logAPI: function (method, url, data, response) {
        if (!this.enabled) return;
        
        console.group(`API ${method}: ${url}`);
        if (data) console.log('Request data:', data);
        if (response) console.log('Response:', response);
        console.groupEnd();
    },
    error: function (message, error) {
        console.error(`[DEBUG] ${message}`, error);
    }
};

console.log(`‚úÖ Arise Crossover Stats - Version ${APP_VERSION} (${APP_BUILD_DATE})`);
console.log(`‚úÖ Running in ${isDevelopment ? 'DEVELOPMENT' : 'PRODUCTION'} mode`);

// Th√™m cache manager ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu v√† c·∫£i thi·ªán hi·ªáu su·∫•t
const CacheManager = {
    // Th·ªùi gian cache h·∫øt h·∫°n (10 ph√∫t)
    EXPIRY_TIME: 10 * 60 * 1000,

    // Cache l∆∞u tr·ªØ
    cache: {},

    // Ki·ªÉm tra xem c√≥ th·ªÉ s·ª≠ d·ª•ng localStorage hay kh√¥ng
    canUseLocalStorage: function () {
        try {
            localStorage.setItem('test_storage', 'test');
            localStorage.removeItem('test_storage');
            return true;
        } catch (e) {
            console.warn(`‚ö†Ô∏è localStorage kh√¥ng kh·∫£ d·ª•ng: ${e.message}`);
            return false;
        }
    },

    // Ki·ªÉm tra kh·∫£ nƒÉng l∆∞u tr·ªØ
    init: function () {
        const storageAvailable = this.canUseLocalStorage();
        console.log(`üóÑÔ∏è Local storage ${storageAvailable ? 'kh·∫£ d·ª•ng' : 'kh√¥ng kh·∫£ d·ª•ng'}`);

        if (!storageAvailable) {
            // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng khi localStorage kh√¥ng kh·∫£ d·ª•ng
            document.addEventListener('DOMContentLoaded', () => {
                const storageAlert = document.createElement('div');
                storageAlert.className = 'alert alert-warning alert-dismissible fade show';
                storageAlert.innerHTML = `
                    <strong>L∆∞u √Ω:</strong> Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng cho ph√©p l∆∞u tr·ªØ c·ª•c b·ªô.
                    D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫£i l·∫°i m·ªói khi l√†m m·ªõi trang. 
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;

                const container = document.querySelector('.container') || document.body;
                if (container) {
                    container.insertBefore(storageAlert, container.firstChild);
                }
            });
        }

        return storageAvailable;
    },

    // L∆∞u data v√†o cache
    setCache: function (key, data) {
        console.log(`üóÑÔ∏è Caching data for key: ${key}, size: ${JSON.stringify(data).length} bytes`);

        // Lu√¥n l∆∞u trong memory cache
        this.cache[key] = {
            data: data,
            timestamp: Date.now()
        };

        // N·∫øu localStorage kh·∫£ d·ª•ng, l∆∞u ·ªü ƒë√≥
        if (this.canUseLocalStorage()) {
            try {
                // S·ª≠ d·ª•ng try-catch ƒë·ªÉ x·ª≠ l√Ω l·ªói quota exceeded
                const stringData = JSON.stringify({
                    data: data,
                    timestamp: Date.now()
                });

                // Ki·ªÉm tra k√≠ch th∆∞·ªõc tr∆∞·ªõc khi l∆∞u
                if (stringData.length < 4.5 * 1024 * 1024) { // Gi·ªõi h·∫°n 4.5MB ƒë·ªÉ an to√†n
                    localStorage.setItem(`cache_${key}`, stringData);
                    console.log(`üóÑÔ∏è Data also cached to localStorage (${formatFileSize(stringData.length)})`);
                } else {
                    console.warn(`üìõ D·ªØ li·ªáu qu√° l·ªõn ƒë·ªÉ l∆∞u v√†o localStorage: ${formatFileSize(stringData.length)}`);

                    // Th·ª≠ n√©n d·ªØ li·ªáu ch·ªâ l∆∞u th√¥ng tin c·∫ßn thi·∫øt
                    const compressedData = Array.isArray(data) ? data.map(item => {
                        return {
                            PlayerName: item.PlayerName,
                            Cash: item.Cash,
                            Gems: item.Gems,
                            PetCount: item.PetCount
                        };
                    }) : data;

                    const compressedString = JSON.stringify({
                        data: compressedData,
                        timestamp: Date.now(),
                        compressed: true
                    });

                    if (compressedString.length < 4.5 * 1024 * 1024) {
                        localStorage.setItem(`cache_${key}_compressed`, compressedString);
                        console.log(`üóÑÔ∏è Compressed data cached to localStorage (${formatFileSize(compressedString.length)})`);
                    } else {
                        console.warn(`üìõ Ngay c·∫£ d·ªØ li·ªáu n√©n v·∫´n qu√° l·ªõn: ${formatFileSize(compressedString.length)}`);
                    }
                }
            } catch (e) {
                console.warn(`üìõ Kh√¥ng th·ªÉ l∆∞u v√†o localStorage: ${e.message}`);
            }
        } else {
            console.warn("üìõ localStorage kh√¥ng kh·∫£ d·ª•ng, ch·ªâ l∆∞u trong b·ªô nh·ªõ");
        }
    },

    // L·∫•y data t·ª´ cache
    getCache: function (key) {
        // ∆Øu ti√™n cache b·ªô nh·ªõ
        const memoryCache = this.cache[key];
        if (memoryCache && Date.now() - memoryCache.timestamp < this.EXPIRY_TIME) {
            console.log(`üóÑÔ∏è Serving data from memory cache for key: ${key}`);
            return memoryCache.data;
        }

        // Th·ª≠ l·∫•y t·ª´ localStorage n·∫øu kh·∫£ d·ª•ng
        if (this.canUseLocalStorage()) {
            try {
                // Th·ª≠ l·∫•y d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
                const storedCache = localStorage.getItem(`cache_${key}`);
                if (storedCache) {
                    const parsedCache = JSON.parse(storedCache);
                    if (Date.now() - parsedCache.timestamp < this.EXPIRY_TIME) {
                        console.log(`üóÑÔ∏è Serving data from localStorage cache for key: ${key}`);
                        // C·∫≠p nh·∫≠t cache b·ªô nh·ªõ
                        this.cache[key] = parsedCache;
                        return parsedCache.data;
                    } else {
                        console.log(`‚åõ Cache expired for key: ${key}`);
                        localStorage.removeItem(`cache_${key}`);
                    }
                }

                // Th·ª≠ l·∫•y d·ªØ li·ªáu n√©n n·∫øu c√≥
                const compressedCache = localStorage.getItem(`cache_${key}_compressed`);
                if (compressedCache) {
                    const parsedCompressed = JSON.parse(compressedCache);
                    if (Date.now() - parsedCompressed.timestamp < this.EXPIRY_TIME) {
                        console.log(`üóÑÔ∏è Serving compressed data from localStorage for key: ${key}`);
                        console.warn(`‚ö†Ô∏è ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu n√©n c√≥ th√¥ng tin h·∫°n ch·∫ø`);
                        return parsedCompressed.data;
                    } else {
                        console.log(`‚åõ Compressed cache expired for key: ${key}`);
                        localStorage.removeItem(`cache_${key}_compressed`);
                    }
                }
            } catch (e) {
                console.warn(`üìõ L·ªói ƒë·ªçc t·ª´ localStorage: ${e.message}`);
            }
        }

        return null;
    },

    // X√≥a cache theo key
    clearCache: function (key) {
        console.log(`üßπ Clearing cache for key: ${key}`);
        delete this.cache[key];

        if (this.canUseLocalStorage()) {
            try {
                localStorage.removeItem(`cache_${key}`);
                localStorage.removeItem(`cache_${key}_compressed`);
            } catch (e) {
                console.warn(`üìõ L·ªói x√≥a t·ª´ localStorage: ${e.message}`);
            }
        }
    },

    // X√≥a to√†n b·ªô cache
    clearAllCache: function () {
        console.log(`üßπ Clearing all caches`);
        this.cache = {};

        if (this.canUseLocalStorage()) {
            try {
                // Ch·ªâ x√≥a c√°c item c√≥ prefix cache_
                const keysToRemove = [];
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    if (key && key.startsWith('cache_')) {
                        keysToRemove.push(key);
                    }
                }

                // X√≥a c√°c key ƒë√£ thu th·∫≠p
                keysToRemove.forEach(key => {
                    localStorage.removeItem(key);
                });

                console.log(`üßπ ƒê√£ x√≥a ${keysToRemove.length} cache items t·ª´ localStorage`);
            } catch (e) {
                console.warn(`üìõ L·ªói x√≥a t·ª´ localStorage: ${e.message}`);
            }
        }
    }
};

// Kh·ªüi t·∫°o CacheManager ngay khi script ƒë∆∞·ª£c t·∫£i
CacheManager.init();

// Remove trailing slash if exists to avoid double slash
function getUrl(endpoint) {
    // Ensure endpoint starts with a slash
    if (!endpoint.startsWith('/')) {
        endpoint = '/' + endpoint;
    }
    
    // If in production, use relative URLs
    if (!isDevelopment) {
        return endpoint;
    }
    
    // Remove trailing slash from base URL if it exists
    const baseUrl = API_BASE_URL.endsWith('/') 
        ? API_BASE_URL.slice(0, -1) 
        : API_BASE_URL;
        
    const fullUrl = baseUrl + endpoint;
    DEBUG.logAPI('URL', `Generated URL: ${fullUrl}`);
    return fullUrl;
}

// Bi·∫øn to√†n c·ª•c cho d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
let currentData = [];
let filteredData = []; // Th√™m bi·∫øn l∆∞u d·ªØ li·ªáu ƒë√£ l·ªçc
let isLoadingData = false;
let loadingErrorOccurred = false;

// C√†i ƒë·∫∑t ph√¢n trang
const pagination = {
    itemsPerPage: 20, // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã 20 ng∆∞·ªùi ch∆°i m·ªói trang
    currentPage: 1,
    totalPages: 1,
    totalItems: 0,
    serverSidePagination: true // Enable server-side pagination
};

// Tr·∫°ng th√°i s·∫Øp x·∫øp
const sortState = {
    field: 'PlayerName',
    direction: 'asc'
};

/**
 * ƒê·ªãnh d·∫°ng s·ªë v·ªõi d·∫•u ph·∫©y ngƒÉn c√°ch h√†ng ngh√¨n
 * @param {number} num - S·ªë c·∫ßn ƒë·ªãnh d·∫°ng
 * @return {string} Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng
 */
function formatNumber(num) {
    if (num === undefined || num === null) return "0";
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

/**
 * ƒê·ªãnh d·∫°ng th·ªùi gian ƒë∆°n gi·∫£n
 * @param {string} dateString - Chu·ªói th·ªùi gian
 * @return {string} Chu·ªói th·ªùi gian ƒë√£ ƒë·ªãnh d·∫°ng
 */
function formatDateTime(dateString) {
    if (!dateString) return "";
    
    // T·∫°o ƒë·ªëi t∆∞·ª£ng Date t·ª´ chu·ªói
    const date = new Date(dateString);
    
    // Format gi·ªù ph√∫t
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    const seconds = date.getSeconds().toString().padStart(2, '0');
    
    // Format ng√†y th√°ng
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    
    // K·∫øt h·ª£p th√†nh chu·ªói ƒë·ªãnh d·∫°ng: "HH:MM:SS DD/MM/YYYY"
    return `${hours}:${minutes}:${seconds} ${day}/${month}/${year}`;
}

/**
 * Format file size ƒë·ªÉ hi·ªÉn th·ªã th√¢n thi·ªán
 * @param {number} bytes - K√≠ch th∆∞·ªõc t√≠nh b·∫±ng bytes
 * @returns {string} K√≠ch th∆∞·ªõc ƒë√£ ƒë·ªãnh d·∫°ng
 */
function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' B';
    else if (bytes < 1048576) return Math.round(bytes / 1024) + ' KB';
    else return Math.round(bytes / 1048576 * 10) / 10 + ' MB';
}

/**
 * T·∫°o b·∫£ng d·ªØ li·ªáu t·ª´ m·∫£ng ng∆∞·ªùi ch∆°i
 * @param {Array} players - M·∫£ng d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
 */
async function createPlayersTable(players) {
    const container = document.getElementById('playersContainer');
    if (!container) return;

    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
    if (!players || players.length === 0) {
        container.innerHTML = `
            <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle-fill me-2"></i> 
                Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i. Vui l√≤ng ƒë·ª£i ng∆∞·ªùi ch∆°i tham gia tr√≤ ch∆°i ho·∫∑c th·ª≠ l√†m m·ªõi d·ªØ li·ªáu.
            </div>
        `;
        return;
    }
    
    filteredData = [...players];
    
    // T√≠nh to√°n s·ªë trang
    const totalItems = pagination.serverSidePagination ? pagination.totalItems : players.length;
    pagination.totalPages = Math.ceil(totalItems / pagination.itemsPerPage);

    // X√°c ƒë·ªãnh ng∆∞·ªùi ch∆°i hi·ªÉn th·ªã tr√™n trang hi·ªán t·∫°i
    let paginatedPlayers;

    if (pagination.serverSidePagination) {
        // Server ƒë√£ x·ª≠ l√Ω ph√¢n trang, hi·ªÉn th·ªã to√†n b·ªô d·ªØ li·ªáu ƒë√£ nh·∫≠n
        paginatedPlayers = players;
    } else {
        // Ph√¢n trang ph√≠a client
    const startIndex = (pagination.currentPage - 1) * pagination.itemsPerPage;
        paginatedPlayers = players.slice(startIndex, startIndex + pagination.itemsPerPage);
    }

    // X·ª≠ l√Ω d·ªØ li·ªáu song song
    const processedPlayerData = await Promise.all(paginatedPlayers.map(async player => {
        // ƒê·∫øm s·ªë l∆∞·ª£ng pet c√≥ rank S v√† SS ri√™ng bi·ªát
        const sPets = player.PetsList ? player.PetsList.filter(pet => pet.Rank === 'S').length : 0;
        const ssPets = player.PetsList ? player.PetsList.filter(pet => pet.Rank === 'SS' || pet.Rank === 'G').length : 0;

        // T·∫°o tooltip cho items
        const itemsTooltip = player.ItemsList ? player.ItemsList.map(item =>
            `${item.Name}: ${item.Amount}`
        ).join('\n') : '';

        // ƒê·∫øm t·ªïng s·ªë items
        const totalItems = player.ItemsList ? player.ItemsList.length : 0;

        // L·∫•y s·ªë l∆∞·ª£ng Ticket
        const ticket = player.ItemsList ? player.ItemsList.find(item => item.Name === 'Ticket') : null;
        const ticketAmount = ticket ? ticket.Amount : 0;

        // T·∫°o danh s√°ch gamepass
        const gamepasses = player.PassesList ? player.PassesList.map(pass => pass.Name).join(', ') : '';
        const gamepassCount = player.PassesList ? player.PassesList.length : 0;

        return {
            player,
            sPets,
            ssPets,
            itemsTooltip,
            totalItems,
            ticketAmount,
            gamepasses,
            gamepassCount
        };
    }));
    
    const tableHtml = `
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <h5>Total Accounts: <span class="badge bg-primary">${pagination.totalItems}</span></h5>
            </div>
            <div class="d-flex align-items-center">
                <span class="me-2">Items per page:</span>
                <select id="itemsPerPageSelect" class="form-select form-select-sm" style="width: 70px;">
                    <option value="10" ${pagination.itemsPerPage === 10 ? 'selected' : ''}>10</option>
                    <option value="20" ${pagination.itemsPerPage === 20 ? 'selected' : ''}>20</option>
                    <option value="50" ${pagination.itemsPerPage === 50 ? 'selected' : ''}>50</option>
                    <option value="100" ${pagination.itemsPerPage === 100 ? 'selected' : ''}>100</option>
                </select>
            </div>
        </div>
        
        <div class="table-responsive">
        <table class="table table-dark table-striped table-hover">
                <thead class="table-dark sticky-top">
                <tr>
                    <th class="text-center" style="width: 40px;">
                        <input type="checkbox" class="form-check-input" id="selectAll">
                    </th>
                    <th class="sortable" data-sort="PlayerName">Player Name <i class="bi bi-arrow-down-up"></i></th>
                    <th class="sortable" data-sort="Cash">Cash <i class="bi bi-arrow-down-up"></i></th>
                    <th class="sortable" data-sort="Gems">Gems <i class="bi bi-arrow-down-up"></i></th>
                    <th class="sortable text-center" data-sort="Ticket">Ticket <i class="bi bi-arrow-down-up"></i></th>
                    <th class="sortable text-center" data-sort="PetS">S Pets <i class="bi bi-arrow-down-up"></i></th>
                    <th class="sortable text-center" data-sort="PetSS">SS Pets <i class="bi bi-arrow-down-up"></i></th>
                    <th class="text-center">Gamepasses</th>
                </tr>
            </thead>
            <tbody id="playersTableBody">
                    ${processedPlayerData.map(data => {
                    return `
                    <tr>
                        <td class="text-center">
                                <input type="checkbox" class="form-check-input player-checkbox" data-player="${data.player.PlayerName}">
                        </td>
                        <td>
                                <strong class="text-light">${data.player.PlayerName}</strong>
                        </td>
                            <td class="text-light">${formatNumber(data.player.Cash || 0)}</td>
                            <td class="text-light">${formatNumber(data.player.Gems || 0)}</td>
                        <td class="text-center">
                                <span class="badge bg-warning text-dark">${formatNumber(data.ticketAmount)}</span>
                        </td>
                        <td class="text-center">
                                <span class="badge pet-rank-S">${data.sPets}</span>
                        </td>
                        <td class="text-center">
                                <span class="badge pet-rank-SS">${data.ssPets}</span>
                        </td>
                        <td class="text-center">
                            <span class="badge bg-info gamepass-badge" 
                                  style="cursor: pointer;" 
                                  data-bs-toggle="modal" 
                                  data-bs-target="#gamepassModal"
                                      data-player="${data.player.PlayerName}"
                                      data-gamepasses='${JSON.stringify(data.player.PassesList || [])}'>
                                    ${data.gamepassCount}
                            </span>
                        </td>
                    </tr>
                `}).join('')}
            </tbody>
        </table>
        </div>
        
        ${createPaginationControls()}
        
        <!-- Gamepass Modal -->
        <div class="modal fade" id="gamepassModal" tabindex="-1" aria-labelledby="gamepassModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content bg-dark">
                    <div class="modal-header">
                        <h5 class="modal-title text-light" id="gamepassModalLabel">Gamepass Details</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="text-light mb-3">
                            Player: <span id="modalPlayerName" class="fw-bold"></span>
                        </div>
                        <div class="list-group">
                            <div id="gamepassList" class="list-group-item bg-dark text-light border-secondary">
                                <!-- Gamepass list will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    container.innerHTML = tableHtml;

    // Kh·ªüi t·∫°o tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Thi·∫øt l·∫≠p t·∫•t c·∫£ s·ª± ki·ªán v√† t√≠nh nƒÉng c·∫ßn thi·∫øt
    await Promise.all([
        setupGamepassBadges(),
        setupSortingListeners(),
        initTableFeatures(),
        setupItemsPerPageSelect(),
        setupPaginationListeners()
    ]);

    // C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng s·∫Øp x·∫øp
    updateSortingIcons();
}
/**
 * T·∫°o ƒëi·ªÅu khi·ªÉn ph√¢n trang
 * @returns {string} HTML cho ƒëi·ªÅu khi·ªÉn ph√¢n trang
 */
function createPaginationControls() {
    if (pagination.totalPages <= 1) {
        return '';
    }

    console.log(`Creating pagination: Current page=${pagination.currentPage}, Total pages=${pagination.totalPages}`);
    
    let paginationHtml = `
        <nav aria-label="Page navigation" class="mt-3">
            <ul class="pagination justify-content-center">
                <li class="page-item ${pagination.currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="prev" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
    `;
    
    // Hi·ªÉn th·ªã t·ªëi ƒëa 5 trang
    const maxVisiblePages = 5;
    let startPage = Math.max(1, pagination.currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(pagination.totalPages, startPage + maxVisiblePages - 1);
    
    // ƒêi·ªÅu ch·ªânh n·∫øu kh√¥ng ƒë·ªß trang ƒë·ªÉ hi·ªÉn th·ªã
    if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    // Hi·ªÉn th·ªã n√∫t trang ƒë·∫ßu n·∫øu c·∫ßn
    if (startPage > 1) {
        paginationHtml += `
            <li class="page-item">
                <a class="page-link" href="#" data-page="1">1</a>
            </li>
        `;
        
        if (startPage > 2) {
            paginationHtml += `
                <li class="page-item disabled">
                    <a class="page-link" href="#">...</a>
                </li>
            `;
        }
    }
    
    // Hi·ªÉn th·ªã c√°c trang
    for (let i = startPage; i <= endPage; i++) {
        paginationHtml += `
            <li class="page-item ${pagination.currentPage === i ? 'active' : ''}">
                <a class="page-link" href="#" data-page="${i}">${i}</a>
            </li>
        `;
    }
    
    // Hi·ªÉn th·ªã n√∫t trang cu·ªëi n·∫øu c·∫ßn
    if (endPage < pagination.totalPages) {
        if (endPage < pagination.totalPages - 1) {
            paginationHtml += `
                <li class="page-item disabled">
                    <a class="page-link" href="#">...</a>
                </li>
            `;
        }
        
        paginationHtml += `
            <li class="page-item">
                <a class="page-link" href="#" data-page="${pagination.totalPages}">${pagination.totalPages}</a>
            </li>
        `;
    }
    
    paginationHtml += `
                <li class="page-item ${pagination.currentPage === pagination.totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="next" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    `;
    
    return paginationHtml;
}

function setupPaginationListeners() {
    console.log('Setting up pagination listeners');

    // X√≥a t·∫•t c·∫£ event listeners c≈©
    const oldPagination = document.querySelectorAll('.pagination');
    if (oldPagination) {
        oldPagination.forEach(p => {
            const clone = p.cloneNode(true);
            p.parentNode.replaceChild(clone, p);
        });
    }

    // √Åp d·ª•ng event listeners m·ªõi
    document.querySelectorAll('.pagination .page-link').forEach(link => {
        link.addEventListener('click', async function (e) {
            e.preventDefault();
            
            const page = this.getAttribute('data-page');
            console.log(`Pagination link clicked: ${page}`);

            let newPage = pagination.currentPage;
            
            if (page === 'prev') {
                if (pagination.currentPage > 1) {
                    newPage = pagination.currentPage - 1;
                }
            } else if (page === 'next') {
                if (pagination.currentPage < pagination.totalPages) {
                    newPage = pagination.currentPage + 1;
                }
            } else {
                newPage = parseInt(page);
            }

            if (newPage !== pagination.currentPage) {
                console.log(`Chuy·ªÉn trang t·ª´ ${pagination.currentPage} sang ${newPage}`);
                pagination.currentPage = newPage;

                // Lu√¥n t·∫£i d·ªØ li·ªáu m·ªõi khi chuy·ªÉn trang ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ch√≠nh x√°c
                await fetchLatestStats(false);

                // Cu·ªôn l√™n ƒë·∫ßu b·∫£ng
                const tableTop = document.querySelector('.table');
                if (tableTop) {
                    window.scrollTo({ top: tableTop.offsetTop - 20, behavior: 'smooth' });
                }
            }
        });
    });
}

/**
 * Kh·ªüi t·∫°o t·∫•t c·∫£ t√≠nh nƒÉng c·ªßa b·∫£ng
 */
function initTableFeatures() {
    setupCheckboxListeners();
}

/**
 * Thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c c·ªôt s·∫Øp x·∫øp
 */
function setupSortingListeners() {
    document.querySelectorAll('.sortable').forEach(th => {
        th.addEventListener('click', () => {
            const field = th.getAttribute('data-sort');
            sortData(field);
        });
    });
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o loading
 */
function showLoadingIndicator() {
    const container = document.getElementById('playersContainer');
    if (!container) return;

    container.innerHTML = `
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-light">ƒêang t·∫£i d·ªØ li·ªáu ng∆∞·ªùi ch∆°i...</p>
        </div>
    `;
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
 * @param {string} error - Th√¥ng b√°o l·ªói
 */
function showErrorMessage(error) {
    const container = document.getElementById('playersContainer');
    if (!container) return;

    container.innerHTML = `
        <div class="alert alert-danger">
            <h4 class="alert-heading">L·ªói khi t·∫£i d·ªØ li·ªáu!</h4>
            <p>${error}</p>
            <hr>
            <div class="d-flex justify-content-end">
                <button id="retryBtn" class="btn btn-outline-danger">
                    <i class="bi bi-arrow-clockwise me-1"></i> Th·ª≠ l·∫°i
                </button>
            </div>
        </div>
    `;

    // Th√™m h√†m x·ª≠ l√Ω n√∫t th·ª≠ l·∫°i
    document.getElementById('retryBtn').addEventListener('click', () => {
        fetchLatestStats(true);
    });
}

/**
 * L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ server
 * @param {boolean} forceRefresh - C√≥ b·∫Øt bu·ªôc t·∫£i m·ªõi t·ª´ server kh√¥ng, b·ªè qua cache
 */
async function fetchLatestStats(forceRefresh = false) {
    // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm hi·ªán t·∫°i n·∫øu c√≥
    const searchTerm = document.getElementById('searchInput').value.trim();

    // T·∫°o key cache bao g·ªìm c·∫£ tham s·ªë t√¨m ki·∫øm
    const CACHE_KEY = `latest_stats_page_${pagination.currentPage}_size_${pagination.itemsPerPage}_search_${searchTerm || 'none'}`;

    // Tr√°nh t·∫£i ƒë·ªìng th·ªùi nhi·ªÅu l·∫ßn
    if (isLoadingData) {
        console.log('ƒêang t·∫£i d·ªØ li·ªáu, b·ªè qua y√™u c·∫ßu m·ªõi...');
        return;
    }

    isLoadingData = true;
    console.log(`Fetching data - Page: ${pagination.currentPage}, Items per page: ${pagination.itemsPerPage}, Search: "${searchTerm || 'none'}"`);

    // Hi·ªÉn th·ªã loading state
    const container = document.getElementById('playersContainer');

    // Ki·ªÉm tra cache tr∆∞·ªõc khi hi·ªÉn th·ªã loading n·∫øu kh√¥ng ph·∫£i force refresh
    if (!forceRefresh) {
        const cachedData = CacheManager.getCache(CACHE_KEY);
        if (cachedData) {
            console.log(`üóÑÔ∏è Using cached data for page ${pagination.currentPage} with search "${searchTerm || 'none'}"`);

            // Extract data v√† pagination info t·ª´ cache
            let data, paginationInfo;

            if (cachedData.data && cachedData.pagination) {
                data = cachedData.data;
                paginationInfo = cachedData.pagination;

                // ƒê·∫£m b·∫£o th√¥ng tin ph√¢n trang ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë√∫ng
                pagination.currentPage = paginationInfo.page;
                pagination.totalItems = paginationInfo.total_items;
                pagination.totalPages = paginationInfo.total_pages;
                pagination.serverSidePagination = true;

                console.log(`Cache hit - Page ${pagination.currentPage}/${pagination.totalPages}, Total items: ${pagination.totalItems}`);
            } else {
                // Format c≈© - ch·ªâ l√† m·∫£ng ng∆∞·ªùi ch∆°i
                data = cachedData;
                pagination.totalItems = data.length;
                pagination.totalPages = Math.ceil(data.length / pagination.itemsPerPage);
                pagination.serverSidePagination = false;
            }

            currentData = data;
            filteredData = data;

            await createPlayersTable(data);

            // Hi·ªÉn th·ªã th√¥ng b√°o nh·ªè v·ªÅ vi·ªác d√πng cache
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-info alert-dismissible fade show mt-2';
            alertDiv.innerHTML = `
                <small>ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu trang ${pagination.currentPage} t·ª´ b·ªô nh·ªõ cache. <a href="#" id="forceRefreshLink">T·∫£i m·ªõi</a> ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh·∫•t.</small>
                <button type="button" class="btn-close btn-sm" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            container.insertAdjacentElement('afterbegin', alertDiv);

            // Th√™m event listener cho link t·∫£i m·ªõi
            document.getElementById('forceRefreshLink').addEventListener('click', function (e) {
                e.preventDefault();
                fetchLatestStats(true);
            });

            isLoadingData = false;
            return;
        }
    }

    // N·∫øu kh√¥ng c√≥ cache ho·∫∑c force refresh, hi·ªÉn th·ªã loading indicator
    showLoadingIndicator();

    try {
        // T·∫°o URL API v·ªõi th√¥ng tin ph√¢n trang
        let apiUrl = getUrl('/api/latest');
        apiUrl += `?page=${pagination.currentPage}&page_size=${pagination.itemsPerPage}`;

        // Th√™m tham s·ªë t√¨m ki·∫øm n·∫øu c√≥
        if (searchTerm) {
            apiUrl += `&search=${encodeURIComponent(searchTerm)}`;
        }

        // N·∫øu force refresh, th√™m th√¥ng s·ªë ƒë·ªÉ tr√°nh cache browser
        if (forceRefresh) {
            apiUrl += `&_t=${Date.now()}`;
        }

        console.log('G·ªçi API:', apiUrl);
        DEBUG.logAPI('GET', apiUrl);
        
        const response = await fetch(apiUrl, {
            method: 'GET',
            credentials: 'include', // Include cookies
            headers: {
                'Accept': 'application/json',
                'Cache-Control': forceRefresh ? 'no-cache, no-store, must-revalidate' : ''
            }
        });
        
        console.log('API Response status:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`HTTP error: ${response.status} - ${response.statusText}`);
        }
        
        const responseData = await response.json();
        console.log('API response received:', responseData);

        let data, paginationInfo;

        // Check if the response is already structured with data and pagination
        if (responseData.data && responseData.pagination) {
            data = responseData.data;
            paginationInfo = responseData.pagination;

            console.log('Ph√¢n trang t·ª´ server:', paginationInfo);

            // Update pagination state
            pagination.currentPage = paginationInfo.page;
            pagination.totalItems = paginationInfo.total_items;
            pagination.totalPages = paginationInfo.total_pages;
            pagination.serverSidePagination = true;

            console.log(`Trang hi·ªán t·∫°i: ${pagination.currentPage}/${pagination.totalPages}, T·ªïng s·ªë m·ª•c: ${pagination.totalItems}`);
        } else {
            // Legacy format - just an array of players
            data = responseData;
            pagination.totalItems = data.length;
            pagination.totalPages = Math.ceil(data.length / pagination.itemsPerPage);
            pagination.serverSidePagination = false;

            console.log('Kh√¥ng c√≥ th√¥ng tin ph√¢n trang t·ª´ server, s·ª≠ d·ª•ng ph√¢n trang client-side');
        }

        // Validate data format
        if (!Array.isArray(data)) {
            console.error('Invalid data format received:', data);
            DEBUG.error('Invalid data format', data);
            throw new Error('Invalid data format received from server');
        }
        
        // Check if we have valid data
        if (data.length === 0) {
            console.log('No player data available in response');

            if (searchTerm) {
                // Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
            container.innerHTML = `
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i n√†o t√™n "${searchTerm}".
                        <button class="btn btn-sm btn-outline-secondary ms-3" id="clearSearchBtn">
                            <i class="bi bi-x-circle me-1"></i> X√≥a t√¨m ki·∫øm
                        </button>
                    </div>
                `;

                // Th√™m s·ª± ki·ªán cho n√∫t x√≥a t√¨m ki·∫øm
                document.getElementById('clearSearchBtn').addEventListener('click', () => {
                    document.getElementById('searchInput').value = '';
                    fetchLatestStats(true);
                });
            } else {
                // Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng c√≥ d·ªØ li·ªáu
                container.innerHTML = `
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i. Vui l√≤ng ƒë·ª£i ng∆∞·ªùi ch∆°i tham gia tr√≤ ch∆°i.
                </div>
            `;
            }

            isLoadingData = false;
            return;
        }
        
        console.log(`Nh·∫≠n ƒë∆∞·ª£c ${data.length} b·∫£n ghi ng∆∞·ªùi ch∆°i`);

        // L∆∞u v√†o cache v·ªõi kh√≥a bao g·ªìm th√¥ng tin ph√¢n trang v√† t√¨m ki·∫øm
        if (data.length > 0) {
            CacheManager.setCache(CACHE_KEY, responseData);
        }

        currentData = data;
        filteredData = data;

        // Reset error state
        loadingErrorOccurred = false;

        // C·∫≠p nh·∫≠t b·∫£ng d·ªØ li·ªáu
        await createPlayersTable(data);

        // C·∫≠p nh·∫≠t th·ªùi gian refresh
        const lastUpdatedEl = document.getElementById('last-updated');
        if (lastUpdatedEl) {
            lastUpdatedEl.textContent = new Date().toLocaleTimeString();
        }

    } catch (error) {
        console.error('Error fetching data:', error);
        DEBUG.error('Fetch error', error);

        // Set error state
        loadingErrorOccurred = true;

        // N·∫øu c√≥ l·ªói, th·ª≠ d√πng cache n·∫øu c√≥
        const cachedData = CacheManager.getCache(CACHE_KEY);
        if (cachedData && !forceRefresh) {
            console.log(`üóÑÔ∏è Fallback to cached data for page ${pagination.currentPage} due to error`);

            // Extract data from cache
            let data;
            if (cachedData.data && Array.isArray(cachedData.data)) {
                data = cachedData.data;

                // Update pagination if available
                if (cachedData.pagination) {
                    pagination.currentPage = cachedData.pagination.page || pagination.currentPage;
                    pagination.totalItems = cachedData.pagination.total_items || data.length;
                    pagination.totalPages = cachedData.pagination.total_pages ||
                        Math.ceil(pagination.totalItems / pagination.itemsPerPage);
                }
            } else {
                data = cachedData;
                pagination.totalItems = data.length;
                pagination.totalPages = Math.ceil(data.length / pagination.itemsPerPage);
            }

        container.innerHTML = `
                <div class="alert alert-warning alert-dismissible fade show mb-3">
                    <strong>L·ªói k·∫øt n·ªëi:</strong> ${error.message}. ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ b·ªô nh·ªõ cache.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        
            currentData = data;
            filteredData = data;
            await createPlayersTable(data);
        } else {
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu kh√¥ng c√≥ cache
            showErrorMessage(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: ${error.message}`);
        }
    } finally {
        isLoadingData = false;

        // ƒê·∫£m b·∫£o r·∫±ng n√∫t ph√¢n trang ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë√∫ng
        setTimeout(() => {
            setupPaginationListeners();

            // C·∫≠p nh·∫≠t UI ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng trang hi·ªán t·∫°i
            document.querySelectorAll('.pagination .page-item').forEach(item => {
                const pageLink = item.querySelector('.page-link');
                if (pageLink && pageLink.getAttribute('data-page') == pagination.currentPage) {
                    item.classList.add('active');
                } else if (item.classList.contains('active') && pageLink && pageLink.getAttribute('data-page') != pagination.currentPage) {
                    item.classList.remove('active');
                }
            });

        }, 100);
    }
}

/**
 * S·∫Øp x·∫øp d·ªØ li·ªáu theo tr∆∞·ªùng ch·ªâ ƒë·ªãnh
 * @param {string} field - T√™n tr∆∞·ªùng c·∫ßn s·∫Øp x·∫øp
 */
async function sortData(field) {
    if (sortState.field === field) {
        sortState.direction = sortState.direction === 'asc' ? 'desc' : 'asc';
    } else {
        sortState.field = field;
        sortState.direction = 'asc';
    }
    
    // S·ª≠ d·ª•ng requestAnimationFrame ƒë·ªÉ l√†m m∆∞·ª£t vi·ªác sort
    await new Promise(resolve => {
        requestAnimationFrame(async () => {
            const sortedData = [...filteredData].sort((a, b) => {
        let valA, valB;
        
        if (field === 'timestamp') {
            valA = new Date(a[field]).getTime();
            valB = new Date(b[field]).getTime();
        } else if (field === 'Cash' || field === 'Gems') {
            valA = Number(a[field]) || 0;
            valB = Number(b[field]) || 0;
        } else if (field === 'Ticket') {
                    // T√¨m ticket trong ItemsList
                    const ticketA = a.ItemsList ? a.ItemsList.find(item => item.Name === 'Ticket') : null;
                    const ticketB = b.ItemsList ? b.ItemsList.find(item => item.Name === 'Ticket') : null;
                    valA = ticketA ? ticketA.Amount : 0;
                    valB = ticketB ? ticketB.Amount : 0;
        } else if (field === 'PetS') {
            valA = a.PetsList ? a.PetsList.filter(pet => pet.Rank === 'S').length : 0;
            valB = b.PetsList ? b.PetsList.filter(pet => pet.Rank === 'S').length : 0;
        } else if (field === 'PetSS') {
            valA = a.PetsList ? a.PetsList.filter(pet => 
                pet.Rank === 'SS' || pet.Rank === 'G'
            ).length : 0;
            valB = b.PetsList ? b.PetsList.filter(pet => 
                pet.Rank === 'SS' || pet.Rank === 'G'
            ).length : 0;
        } else {
            valA = String(a[field] || '').toLowerCase();
            valB = String(b[field] || '').toLowerCase();
        }

                // X·ª≠ l√Ω gi√° tr·ªã null/undefined
                if (valA === null || valA === undefined) valA = sortState.direction === 'asc' ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;
                if (valB === null || valB === undefined) valB = sortState.direction === 'asc' ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;
        
        if (sortState.direction === 'asc') {
                    return valA > valB ? 1 : valA < valB ? -1 : 0;
        } else {
                    return valA < valB ? 1 : valA > valB ? -1 : 0;
        }
    });
    
            // N·∫øu s·ª≠ d·ª•ng ph√¢n trang ph√≠a client, reset v·ªÅ trang 1
            if (!pagination.serverSidePagination) {
    pagination.currentPage = 1;
            }

            await createPlayersTable(sortedData);
    updateSortingIcons();
            resolve();
        });
    });
}

/**
 * C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng s·∫Øp x·∫øp tr√™n ti√™u ƒë·ªÅ b·∫£ng
 */
function updateSortingIcons() {
    document.querySelectorAll('.sortable').forEach(th => {
        const thField = th.getAttribute('data-sort');
        if (thField === sortState.field) {
            th.innerHTML = th.textContent.split(' ')[0] + ` <i class="bi bi-arrow-${sortState.direction === 'asc' ? 'up' : 'down'}"></i>`;
        } else {
            th.innerHTML = th.textContent.split(' ')[0] + ` <i class="bi bi-arrow-down-up"></i>`;
        }
    });
}

/**
 * L·ªçc d·ªØ li·ªáu d·ª±a tr√™n ƒë·∫ßu v√†o t√¨m ki·∫øm
 */
/**
 * L·ªçc d·ªØ li·ªáu d·ª±a tr√™n ƒë·∫ßu v√†o t√¨m ki·∫øm
 */
async function filterData() {
    const searchTerm = document.getElementById('searchInput').value.trim();

    // Reset ph√¢n trang v·ªÅ trang 1 khi t√¨m ki·∫øm
        pagination.currentPage = 1;

    // S·ª≠ d·ª•ng debounce ƒë·ªÉ tr√°nh g·ª≠i qu√° nhi·ªÅu request
    clearTimeout(window.filterTimeout);

    window.filterTimeout = setTimeout(async () => {
        // N·∫øu ƒëang t·∫£i d·ªØ li·ªáu, b·ªè qua
        if (isLoadingData) return;

        console.log(`ƒêang th·ª±c hi·ªán t√¨m ki·∫øm: "${searchTerm}"`);

        // Hi·ªÉn th·ªã indicator t√¨m ki·∫øm
        const searchIcon = document.querySelector('#searchInput + .spinner-border');
        if (searchIcon) {
            searchIcon.classList.remove('d-none');
        }

        // Reset l·∫°i currentPage khi t√¨m ki·∫øm
    pagination.currentPage = 1;

        // G·ªçi API ƒë·ªÉ t√¨m ki·∫øm
        await fetchLatestStats(true);

        // ·∫®n indicator t√¨m ki·∫øm
        if (searchIcon) {
            searchIcon.classList.add('d-none');
        }
    }, 500); // Delay 500ms ƒë·ªÉ tr√°nh g·ª≠i qu√° nhi·ªÅu request
}

function setupCheckboxListeners() {
    // Checkbox "Ch·ªçn t·∫•t c·∫£"
    const selectAllCheckbox = document.getElementById('selectAll');
    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', function () {
            const checkboxes = document.querySelectorAll('.player-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
            
            // B·∫≠t/t·∫Øt n√∫t x√≥a
            document.getElementById('deleteSelectedBtn').disabled = !this.checked;
        });
    }
    
    // C√°c checkbox ri√™ng l·∫ª
    document.getElementById('playersContainer').addEventListener('change', function (event) {
        if (event.target.classList.contains('player-checkbox')) {
            // Ki·ªÉm tra xem c√≥ checkbox n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng
            const anyChecked = document.querySelectorAll('.player-checkbox:checked').length > 0;
            document.getElementById('deleteSelectedBtn').disabled = !anyChecked;
            
            // C·∫≠p nh·∫≠t checkbox "Ch·ªçn t·∫•t c·∫£"
            const allChecked = document.querySelectorAll('.player-checkbox:checked').length === 
                              document.querySelectorAll('.player-checkbox').length;
            document.getElementById('selectAll').checked = allChecked;
        }
    });
}

/**
 * X√≥a ng∆∞·ªùi ch∆°i kh·ªèi h·ªá th·ªëng
 * @param {string} playerName - T√™n ng∆∞·ªùi ch∆°i c·∫ßn x√≥a 
 * @returns {Promise<{success: boolean, error: string}>} K·∫øt qu·∫£ x√≥a
 */
async function deletePlayer(playerName) {
    console.log(`‚ö° X√≥a ng∆∞·ªùi ch∆°i: ${playerName}`);
    try {
        const apiUrl = getUrl(`/api/player/${playerName}`);
        console.log(`G·ª≠i request ƒë·∫øn: ${apiUrl}`);
        
        const response = await fetch(apiUrl, {
            method: 'DELETE',
            credentials: 'include',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
        }
        
        const result = await response.json();
        
        if (result && result.success) {
            console.log(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng ng∆∞·ªùi ch∆°i ${playerName}`);

            // X√≥a cache sau khi x√≥a ng∆∞·ªùi ch∆°i
            CacheManager.clearCache('latest_stats');

            return { 
                success: true,
                deletedCount: result.deleted_count || 0,
                remainingCount: result.remaining_count || 0
            };
        } else {
            console.log(`‚ùå Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi ch∆°i ${playerName}`);
            return { 
                success: false, 
                error: result.detail || result.message || 'Server returned success: false'
            };
        }
    } catch (error) {
        console.error('Error deleting player:', error);
        return { 
            success: false, 
            error: error.message || 'Unknown error occurred'
        };
    }
}

/**
 * X√≥a nhi·ªÅu ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn
 */
async function deleteSelectedPlayers() {
    console.log(`‚ö° B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√≥a nhi·ªÅu ng∆∞·ªùi ch∆°i`);
    
    const selectedCheckboxes = document.querySelectorAll('.player-checkbox:checked');
    if (selectedCheckboxes.length === 0) {
        alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ng∆∞·ªùi ch∆°i ƒë·ªÉ x√≥a.');
        return;
    }

    const selectedPlayers = Array.from(selectedCheckboxes).map(checkbox => checkbox.getAttribute('data-player'));
    console.log(`ƒê√£ ch·ªçn ${selectedPlayers.length} ng∆∞·ªùi ch∆°i ƒë·ªÉ x√≥a`);
    
    if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${selectedPlayers.length} ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn?`)) {
        console.log("Ng∆∞·ªùi d√πng ƒë√£ h·ªßy x√≥a");
        return;
    }
    
    console.log("Ti·∫øn h√†nh x√≥a ng∆∞·ªùi ch∆°i...");

    // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
    const container = document.getElementById('playersContainer');
    const originalContent = container.innerHTML;
    container.innerHTML = `
        <div class="text-center my-5">
            <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">ƒêang x√≥a...</span>
            </div>
            <p class="mt-3 text-light">ƒêang x√≥a ${selectedPlayers.length} ng∆∞·ªùi ch∆°i...</p>
            <div class="progress mt-3" style="height: 25px;">
                <div id="deleteProgress" class="progress-bar progress-bar-striped progress-bar-animated bg-danger" 
                     role="progressbar" style="width: 0%;" 
                     aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                    0%
                </div>
            </div>
        </div>
    `;

    let successCount = 0;
    let failCount = 0;
    let errors = [];
    let totalRecordsDeleted = 0;

    // Function to update progress bar
    const updateProgress = (current, total) => {
        const percent = Math.round((current / total) * 100);
        const progressBar = document.getElementById('deleteProgress');
        if (progressBar) {
            progressBar.style.width = `${percent}%`;
            progressBar.setAttribute('aria-valuenow', percent);
            progressBar.textContent = `${percent}% (${current}/${total})`;
        }
    };

    // X√≥a tu·∫ßn t·ª±
    for (let i = 0; i < selectedPlayers.length; i++) {
        const playerName = selectedPlayers[i];
        try {
            console.log(`ƒêang x√≥a: ${playerName}`);
            const result = await deletePlayer(playerName);
            if (result.success) {
                successCount++;
                totalRecordsDeleted += result.deletedCount || 0;
                console.log(`ƒê√£ x√≥a th√†nh c√¥ng: ${playerName}`);
            } else {
                failCount++;
                errors.push(`${playerName}: ${result.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
                console.log(`X√≥a th·∫•t b·∫°i: ${playerName} - ${result.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
            }
        } catch (error) {
            console.error(`Error deleting player ${playerName}:`, error);
            failCount++;
            errors.push(`${playerName}: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
        }

        // Update progress
        updateProgress(i + 1, selectedPlayers.length);
    }

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    let message = `K·∫øt qu·∫£ x√≥a ng∆∞·ªùi ch∆°i:\n`;
    message += `- Th√†nh c√¥ng: ${successCount} ng∆∞·ªùi ch∆°i\n`;
    message += `- T·ªïng s·ªë b·∫£n ghi ƒë√£ x√≥a: ${totalRecordsDeleted}\n`;
    
    if (failCount > 0) {
        message += `- Th·∫•t b·∫°i: ${failCount} ng∆∞·ªùi ch∆°i\n`;
        
        if (errors.length > 0 && errors.length <= 5) {
            message += `\nL·ªói chi ti·∫øt:\n${errors.join('\n')}`;
        } else if (errors.length > 5) {
            message += `\nL·ªói chi ti·∫øt:\n${errors.slice(0, 5).join('\n')}\n...v√† ${errors.length - 5} l·ªói kh√°c`;
        }
    }
    
    alert(message);
    console.log(`ƒê√£ x√≥a xong. Th√†nh c√¥ng: ${successCount}, Th·∫•t b·∫°i: ${failCount}`);

    // Refresh the data to show current state
    await fetchLatestStats(true);
}

/**
 * Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v√† chuy·ªÉn h∆∞·ªõng n·∫øu c·∫ßn
 */
async function checkAuthentication() {
    try {
        const response = await fetch(getUrl('/api/players'), {
            method: 'GET',
            credentials: 'include',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        if (response.status === 401) {
            console.warn('User not authenticated, redirecting to login page');
            window.location.href = '/';
            return false;
        }
        
        return true;
    } catch (error) {
        DEBUG.error('Authentication check failed', error);
        console.error('Error checking authentication:', error);
        return false;
    }
}

/**
 * Thi·∫øt l·∫≠p t·∫•t c·∫£ c√°c s·ª± ki·ªán khi t√†i li·ªáu ƒë√£ s·∫µn s√†ng
 */
document.addEventListener('DOMContentLoaded', async function () {
    // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p tr∆∞·ªõc
    const isAuthenticated = await checkAuthentication();
    if (!isAuthenticated) return;
    
    // Thi·∫øt l·∫≠p t·∫•t c·∫£ c√°c s·ª± ki·ªán song song b·∫±ng Promise.all
    await Promise.all([
        setupSearchInput(),
        setupRefreshButton(),
        setupDeleteButton(),
        setupCacheControls()
    ]);

    // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu (∆∞u ti√™n cache tr∆∞·ªõc)
    await fetchLatestStats(false);

    // T·ª± ƒë·ªông l√†m m·ªõi m·ªói 5 ph√∫t n·∫øu ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông
    let inactivityTime = 0;
    const autoRefreshInterval = 5 * 60; // 5 ph√∫t

    // Reset inactivity timer khi c√≥ t∆∞∆°ng t√°c ng∆∞·ªùi d√πng
    const resetInactivityTimer = () => {
        inactivityTime = 0;
    };

    // G·∫Øn c√°c s·ª± ki·ªán t∆∞∆°ng t√°c ng∆∞·ªùi d√πng
    ['click', 'mousemove', 'keypress', 'scroll', 'touchstart'].forEach(eventType => {
        document.addEventListener(eventType, resetInactivityTimer, true);
    });

    // Thi·∫øt l·∫≠p timer ki·ªÉm tra t·ª± ƒë·ªông l√†m m·ªõi
    setInterval(() => {
        inactivityTime += 1;

        // N·∫øu kh√¥ng ho·∫°t ƒë·ªông trong [autoRefreshInterval] gi√¢y v√† kh√¥ng c√≥ l·ªói, l√†m m·ªõi d·ªØ li·ªáu
        if (inactivityTime >= autoRefreshInterval && !isLoadingData && !loadingErrorOccurred) {
            console.log(`T·ª± ƒë·ªông l√†m m·ªõi sau ${autoRefreshInterval} gi√¢y kh√¥ng ho·∫°t ƒë·ªông`);
            fetchLatestStats(false);
        }
    }, 1000); // Ki·ªÉm tra m·ªói gi√¢y
});

/**
 * Thi·∫øt l·∫≠p s·ª± ki·ªán t√¨m ki·∫øm
 */
async function setupSearchInput() {
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        // Th√™m placeholder
        searchInput.placeholder = "T√¨m ki·∫øm ng∆∞·ªùi ch∆°i...";

        // Th√™m indicator t√¨m ki·∫øm
        const inputGroup = searchInput.parentElement;
        if (inputGroup && !inputGroup.querySelector('.spinner-border')) {
            const spinner = document.createElement('div');
            spinner.className = 'spinner-border spinner-border-sm text-secondary d-none';
            spinner.style.position = 'absolute';
            spinner.style.right = '10px';
            spinner.style.top = '50%';
            spinner.style.transform = 'translateY(-50%)';
            spinner.setAttribute('role', 'status');
            spinner.innerHTML = '<span class="visually-hidden">ƒêang t√¨m ki·∫øm...</span>';

            inputGroup.style.position = 'relative';
            inputGroup.appendChild(spinner);
        }

        // G·∫Øn s·ª± ki·ªán input ƒë·ªÉ t√¨m ki·∫øm khi g√µ
        searchInput.addEventListener('input', filterData);

        // X·ª≠ l√Ω ph√≠m Enter
        searchInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                filterData();
            }
        });

        // N√∫t x√≥a t√¨m ki·∫øm
        const clearButtonContainer = document.createElement('div');
        clearButtonContainer.style.position = 'absolute';
        clearButtonContainer.style.right = '10px';
        clearButtonContainer.style.top = '50%';
        clearButtonContainer.style.transform = 'translateY(-50%)';
        clearButtonContainer.style.zIndex = '5';

        const clearButton = document.createElement('button');
        clearButton.type = 'button';
        clearButton.className = 'btn btn-sm btn-link text-secondary d-none';
        clearButton.innerHTML = '<i class="bi bi-x-circle"></i>';
        clearButton.title = 'X√≥a t√¨m ki·∫øm';
        clearButton.style.padding = '0';
        clearButton.style.margin = '0';
        clearButton.addEventListener('click', () => {
            searchInput.value = '';
            clearButton.classList.add('d-none');
            filterData();
        });

        clearButtonContainer.appendChild(clearButton);
        inputGroup.appendChild(clearButtonContainer);

        // Hi·ªÉn th·ªã/·∫©n n√∫t x√≥a d·ª±a tr√™n gi√° tr·ªã input
        searchInput.addEventListener('input', () => {
            if (searchInput.value.trim()) {
                clearButton.classList.remove('d-none');
            } else {
                clearButton.classList.add('d-none');
            }
        });
    }

    return Promise.resolve();
}

async function setupRefreshButton() {
    const refreshBtn = document.getElementById('refreshBtn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', () => fetchLatestStats(true));
    }
    return Promise.resolve();
    }
    
/**
 * Thi·∫øt l·∫≠p n√∫t x√≥a ƒë√£ ch·ªçn
 */
async function setupDeleteButton() {
    const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');
    if (deleteSelectedBtn) {
        deleteSelectedBtn.addEventListener('click', () => deleteSelectedPlayers());
    }
    return Promise.resolve();
}

/**
 * Thi·∫øt l·∫≠p s·ª± ki·ªán cho gamepass badges 
 */
async function setupGamepassBadges() {
    const badges = document.querySelectorAll('.gamepass-badge');
    const promises = Array.from(badges).map(badge => {
        return new Promise(resolve => {
            badge.addEventListener('click', function () {
                const playerName = this.getAttribute('data-player');
                const gamepasses = JSON.parse(this.getAttribute('data-gamepasses'));

                document.getElementById('modalPlayerName').textContent = playerName;

                const gamepassList = document.getElementById('gamepassList');
                if (gamepasses.length === 0) {
                    gamepassList.innerHTML = '<div class="text-center text-muted">No gamepasses owned</div>';
                } else {
                    gamepassList.innerHTML = gamepasses.map(pass =>
                        `<div class="d-flex justify-content-between align-items-center py-2 border-bottom border-secondary">
                            <span>${pass.Name}</span>
                            <span class="badge bg-success">Owned</span>
                        </div>`
                    ).join('');
                }
            });
            resolve();
        });
    });

    await Promise.all(promises);
}

/**
 * Thi·∫øt l·∫≠p s·ª± ki·ªán cho itemsPerPage select
 */
async function setupItemsPerPageSelect() {
    const itemsPerPageSelect = document.getElementById('itemsPerPageSelect');
    if (itemsPerPageSelect) {
        return new Promise(resolve => {
            itemsPerPageSelect.addEventListener('change', async function () {
                pagination.itemsPerPage = parseInt(this.value);
                pagination.currentPage = 1;

                if (pagination.serverSidePagination) {
                    // T·∫£i l·∫°i d·ªØ li·ªáu t·ª´ server v·ªõi page size m·ªõi
                    await fetchLatestStats(false);
                } else {
                    // C·∫≠p nh·∫≠t UI v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i
                    pagination.totalPages = Math.ceil(filteredData.length / pagination.itemsPerPage);
                    await createPlayersTable(filteredData);
                }
                resolve();
            });
            resolve();
        });
    }
    return Promise.resolve();
}

/**
 * Thi·∫øt l·∫≠p controls ƒë·ªÉ qu·∫£n l√Ω cache
 */
async function setupCacheControls() {
    // T√¨m navbar-nav ƒë·ªÉ th√™m n√∫t qu·∫£n l√Ω cache
    const navbarNav = document.querySelector('.navbar-nav');
    if (navbarNav) {
        const cacheControlsLi = document.createElement('li');
        cacheControlsLi.className = 'nav-item dropdown';
        cacheControlsLi.innerHTML = `
            <a class="nav-link dropdown-toggle" href="#" id="cacheDropdown" role="button" 
               data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-cpu"></i> Cache ${CacheManager.canUseLocalStorage() ? '' : '‚ö†Ô∏è'}
            </a>
            <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="cacheDropdown">
                <li><a class="dropdown-item" href="#" id="clearCacheBtn">
                    <i class="bi bi-trash"></i> X√≥a t·∫•t c·∫£ cache
                </a></li>
                <li><a class="dropdown-item" href="#" id="forceRefreshBtn">
                    <i class="bi bi-arrow-clockwise"></i> T·∫£i m·ªõi (b·ªè qua cache)
                </a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#" id="viewCacheStatsBtn">
                    <i class="bi bi-info-circle"></i> Th√¥ng tin cache
                </a></li>
                ${!CacheManager.canUseLocalStorage() ? `
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item disabled text-warning" href="#">
                    <i class="bi bi-exclamation-triangle"></i> localStorage kh√¥ng kh·∫£ d·ª•ng
                </a></li>` : ''}
            </ul>
        `;
        navbarNav.appendChild(cacheControlsLi);

        // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t
        document.getElementById('clearCacheBtn').addEventListener('click', function (e) {
            e.preventDefault();
            CacheManager.clearAllCache();
            alert('ƒê√£ x√≥a t·∫•t c·∫£ cache');
        });

        document.getElementById('forceRefreshBtn').addEventListener('click', function (e) {
            e.preventDefault();
            fetchLatestStats(true);
        });

        document.getElementById('viewCacheStatsBtn').addEventListener('click', function (e) {
            e.preventDefault();

            // T√≠nh dung l∆∞·ª£ng cache
            let totalSize = 0;
            let cacheItems = [];

            // Ki·ªÉm tra memory cache
            for (const key in CacheManager.cache) {
                const itemSize = JSON.stringify(CacheManager.cache[key]).length;
                totalSize += itemSize;
                cacheItems.push({
                    key: key,
                    size: formatFileSize(itemSize),
                    time: new Date(CacheManager.cache[key].timestamp).toLocaleString()
                });
            }

            // Ki·ªÉm tra localStorage cache n·∫øu kh·∫£ d·ª•ng
            let localStorageSize = 0;
            let localStorageItems = 0;

            if (CacheManager.canUseLocalStorage()) {
                try {
                    localStorageItems = 0;
                    for (let i = 0; i < localStorage.length; i++) {
                        const key = localStorage.key(i);
                        if (key && key.startsWith('cache_')) {
                            const value = localStorage.getItem(key);
                            localStorageSize += value.length;
                            localStorageItems++;
                        }
                    }
                } catch (e) {
                    console.warn(`Error reading localStorage size: ${e.message}`);
                }
            }

            // Hi·ªÉn th·ªã th√¥ng tin
            alert(`Th√¥ng tin Cache:
- B·ªô nh·ªõ RAM: ${formatFileSize(totalSize)}
- S·ªë l∆∞·ª£ng cache trong RAM: ${Object.keys(CacheManager.cache).length} item(s)
${CacheManager.canUseLocalStorage() ?
                    `- localStorage: ${formatFileSize(localStorageSize)}
- S·ªë l∆∞·ª£ng cache trong localStorage: ${localStorageItems} item(s)` :
                    `- localStorage: Kh√¥ng kh·∫£ d·ª•ng`}
- Th·ªùi gian h·∫øt h·∫°n: ${CacheManager.EXPIRY_TIME / 60000} ph√∫t`);
        });
    }

    return Promise.resolve();
}

/**
 * Format file size ƒë·ªÉ hi·ªÉn th·ªã th√¢n thi·ªán
 * @param {number} bytes - K√≠ch th∆∞·ªõc t√≠nh b·∫±ng bytes
 * @returns {string} K√≠ch th∆∞·ªõc ƒë√£ ƒë·ªãnh d·∫°ng
 */
function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' B';
    else if (bytes < 1048576) return Math.round(bytes / 1024) + ' KB';
    else return Math.round(bytes / 1048576 * 10) / 10 + ' MB';
}